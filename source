if getgenv().unexpected_LOAD then return end
getgenv().unexpected_LOAD = true

local function missing(t, f, fallback)
    return type(f) == t and f or fallback
end

--#core
local cloneref = missing("function", cloneref, function(...) return ... end)
local queueteleport = missing("function", queue_on_teleport or (syn and syn.queue_on_teleport) or (fluxus and fluxus.queue_on_teleport))
--#coreEnd

--#imports
local SERVICE = setmetatable({}, {
    __index = function(self, k)
        local s = cloneref(game:GetService(k))
        rawset(self, k, s)
        return s
    end
})

local COREGUI = SERVICE.CoreGui
local PLRS = SERVICE.Players
local UIS = SERVICE.UserInputService
local RS = SERVICE.RunService
local GS = SERVICE.GuiService
local LP = cloneref(PLRS.LocalPlayer)
local TS = SERVICE.TweenService
local HS = SERVICE.HttpService
local TPS = SERVICE.TeleportService
local WS = SERVICE.Workspace
local VU = SERVICE.VirtualUser
local CAM = cloneref(WS.CurrentCamera)
local MOBILE = UIS.TouchEnabled
--#importsEnd

--#importFuncs
local CHAR = LP.Character or LP.CharacterAdded:Wait()
local HUM = cloneref(CHAR:WaitForChild("Humanoid"))
local HRP = cloneref(CHAR:WaitForChild("HumanoidRootPart"))

LP.CharacterAdded:Connect(function(c)
    CHAR = c
    HUM = cloneref(c:WaitForChild("Humanoid"))
    HRP = cloneref(c:WaitForChild("HumanoidRootPart"))
end)
--#importFuncsEnd

local FQ = {
    FONTS = {
        REGULAR = Font.new("rbxasset://fonts/families/GothamSSm.json", Enum.FontWeight.Regular, Enum.FontStyle.Normal),
        BOLD    = Font.new("rbxasset://fonts/families/GothamSSm.json", Enum.FontWeight.Bold, Enum.FontStyle.Normal),
        ITALIC  = Font.new("rbxasset://fonts/families/GothamSSm.json", Enum.FontWeight.Regular, Enum.FontStyle.Italic),
    },
    COLORS = {
        BACKGROUND = Color3.fromRGB(0, 0, 0),
        STROKE     = Color3.fromRGB(50, 50, 50),
        TEXT_MAIN  = Color3.fromRGB(220, 220, 220),
        TEXT_DIM   = Color3.fromRGB(120, 120, 120),
        ACCENT     = Color3.fromRGB(100, 100, 100),
    },
    SIZES = {
        CLI_WIDTH      = 167,
        CLI_WIDTH_FULL = 230,
        CLI_HEIGHT     = 54,
        PILL_HEIGHT    = 71,
    },
    PADDING = {
        SMALL  = UDim.new(0, 4),
        MEDIUM = UDim.new(0, 8),
    }
}

local function CREATE_CORNER(PARENT, RADIUS_SCALE, RADIUS_OFFSET)
    local CORNER = Instance.new("UICorner")
    CORNER.CornerRadius = UDim.new(RADIUS_SCALE or 0, RADIUS_OFFSET or 0)
    CORNER.Parent = PARENT
    return CORNER
end

local function CREATE_STROKE(PARENT, COLOR, APPLY_MODE)
    local STROKE = Instance.new("UIStroke")
    STROKE.Color = COLOR or FQ.COLORS.STROKE
    STROKE.ApplyStrokeMode = APPLY_MODE or Enum.ApplyStrokeMode.Border
    STROKE.Parent = PARENT
    return STROKE
end

local function CREATE_ASPECT(PARENT, RATIO)
    local AR = Instance.new("UIAspectRatioConstraint")
    if RATIO then
        AR.AspectRatio = RATIO
    end
    AR.Parent = PARENT
    return AR
end

local unexpected_UI = {};
local currentVersion = "g2"
local function randomString(length, charset)
    length = length or math.random(10, 20)
    charset = charset or "abcdefghijklmnopqRStuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789"
    local chars = {}
    local rand, sub = math.random, string.sub
    local charsetLength = #charset
    for i = 1, length do
        chars[i] = sub(charset, rand(1, charsetLength), rand(1, charsetLength))
    end
    return table.concat(chars)
end

unexpected_UI["UI"] = Instance.new("ScreenGui", gethui() or COREGUI);
unexpected_UI["UI"]["Name"] = randomString();

unexpected_UI["PILL"] = Instance.new("Frame", unexpected_UI["UI"]);
unexpected_UI["PILL"]["ZIndex"] = 0;
unexpected_UI["PILL"]["BorderSizePixel"] = 0;
unexpected_UI["PILL"]["BackgroundColor3"] = FQ.COLORS.BACKGROUND;
unexpected_UI["PILL"]["Size"] = UDim2.new(0, 218, 0, 71);
unexpected_UI["PILL"]["Position"] = UDim2.new(0.5, -109, 1, -150);
unexpected_UI["PILL"]["BorderColor3"] = FQ.COLORS.BACKGROUND;
unexpected_UI["PILL"]["Name"] = [[Pill]];
CREATE_CORNER(unexpected_UI["PILL"], 1, 0)
CREATE_STROKE(unexpected_UI["PILL"], FQ.COLORS.STROKE)

unexpected_UI["CLI"] = Instance.new("TextBox", unexpected_UI["PILL"]);
unexpected_UI["CLI"]["CursorPosition"] = -1;
unexpected_UI["CLI"]["Name"] = [[CLI]];
unexpected_UI["CLI"]["TextXAlignment"] = Enum.TextXAlignment.Left;
unexpected_UI["CLI"]["PlaceholderColor3"] = FQ.COLORS.TEXT_DIM;
unexpected_UI["CLI"]["BorderSizePixel"] = 0;
unexpected_UI["CLI"]["TextWrapped"] = true;
unexpected_UI["CLI"]["TextSize"] = 20;
unexpected_UI["CLI"]["TextColor3"] = FQ.COLORS.TEXT_MAIN;
unexpected_UI["CLI"]["BackgroundColor3"] = Color3.fromRGB(255, 255, 255);
unexpected_UI["CLI"]["FontFace"] = FQ.FONTS.REGULAR;
unexpected_UI["CLI"]["PlaceholderText"] = [[unexpected ]]..currentVersion;
unexpected_UI["CLI"]["Size"] = UDim2.new(0, 167, 0, 54);
unexpected_UI["CLI"]["Position"] = UDim2.new(0, 25, 0.5, -27);
unexpected_UI["CLI"]["BorderColor3"] = FQ.COLORS.BACKGROUND;
unexpected_UI["CLI"]["Text"] = [[]];
unexpected_UI["CLI"]["ClearTextOnFocus"] = false;
unexpected_UI["CLI"]["ZIndex"] = 1
unexpected_UI["CLI"]["BackgroundTransparency"] = 1;

unexpected_UI["PREDICTOR"] = Instance.new("TextLabel", unexpected_UI["PILL"]);
unexpected_UI["PREDICTOR"]["Name"] = [[Predictor]];
unexpected_UI["PREDICTOR"]["TextXAlignment"] = Enum.TextXAlignment.Left;
unexpected_UI["PREDICTOR"]["BorderSizePixel"] = 0;
unexpected_UI["PREDICTOR"]["TextWrapped"] = true;
unexpected_UI["PREDICTOR"]["TextSize"] = 20;
unexpected_UI["PREDICTOR"]["TextColor3"] = FQ.COLORS.STROKE;
unexpected_UI["PREDICTOR"]["BackgroundColor3"] = Color3.fromRGB(255, 255, 255);
unexpected_UI["PREDICTOR"]["FontFace"] = FQ.FONTS.REGULAR;
unexpected_UI["PREDICTOR"]["Size"] = UDim2.new(0, 167, 0, 54);
unexpected_UI["PREDICTOR"]["Position"] = UDim2.new(0, 25, 0.5, -27);
unexpected_UI["PREDICTOR"]["BorderColor3"] = FQ.COLORS.BACKGROUND;
unexpected_UI["PREDICTOR"]["Text"] = [[]];
unexpected_UI["PREDICTOR"]["ZIndex"] = 0
unexpected_UI["PREDICTOR"]["BackgroundTransparency"] = 1;

unexpected_UI["MENU"] = Instance.new("ImageButton", unexpected_UI["PILL"]);
unexpected_UI["MENU"]["BorderSizePixel"] = 0;
unexpected_UI["MENU"]["BackgroundTransparency"] = 1;
unexpected_UI["MENU"]["BackgroundColor3"] = Color3.fromRGB(255, 255, 255);
unexpected_UI["MENU"]["ImageColor3"] = FQ.COLORS.ACCENT;
unexpected_UI["MENU"]["Image"] = [[rbxassetid://10734887784]];
unexpected_UI["MENU"]["Size"] = UDim2.new(0, 30, 0, 30);
unexpected_UI["MENU"]["BorderColor3"] = FQ.COLORS.BACKGROUND;
unexpected_UI["MENU"]["Name"] = [[Menu]];
unexpected_UI["MENU"]["Position"] = UDim2.new(0.83776, 0, 0.28169, 0);
CREATE_ASPECT(unexpected_UI["MENU"])

unexpected_UI["MENUFRAME"] = Instance.new("Frame", unexpected_UI["PILL"]);
unexpected_UI["MENUFRAME"]["BorderSizePixel"] = 0;
unexpected_UI["MENUFRAME"]["BackgroundColor3"] = FQ.COLORS.BACKGROUND;
unexpected_UI["MENUFRAME"]["ClipsDescendants"] = true;
unexpected_UI["MENUFRAME"]["Size"] = UDim2.new(0, 339, 0, 348);
unexpected_UI["MENUFRAME"]["Position"] = UDim2.new(0.5, -169, 1, -428);
unexpected_UI["MENUFRAME"]["BorderColor3"] = FQ.COLORS.BACKGROUND;
unexpected_UI["MENUFRAME"]["Name"] = [[MenuFrame]];
unexpected_UI["MENUFRAME"]["Visible"] = false;
CREATE_CORNER(unexpected_UI["MENUFRAME"], 0.1, 0)
CREATE_STROKE(unexpected_UI["MENUFRAME"], FQ.COLORS.STROKE);


unexpected_UI["LABEL"] = Instance.new("TextLabel", unexpected_UI["MENUFRAME"]);
unexpected_UI["LABEL"]["TextWrapped"] = true;
unexpected_UI["LABEL"]["ZIndex"] = 2;
unexpected_UI["LABEL"]["TextSize"] = 25;
unexpected_UI["LABEL"]["TextXAlignment"] = Enum.TextXAlignment.Left;
unexpected_UI["LABEL"]["BackgroundColor3"] = Color3.fromRGB(255, 255, 255);
unexpected_UI["LABEL"]["FontFace"] = FQ.FONTS.BOLD;
unexpected_UI["LABEL"]["TextColor3"] = FQ.COLORS.TEXT_MAIN;
unexpected_UI["LABEL"]["BackgroundTransparency"] = 1;
unexpected_UI["LABEL"]["Size"] = UDim2.new(0, 127, 0, 19);
unexpected_UI["LABEL"]["BorderColor3"] = FQ.COLORS.BACKGROUND;
unexpected_UI["LABEL"]["Text"] = [[menu]];
unexpected_UI["LABEL"]["Name"] = [[Label]];
unexpected_UI["LABEL"]["Position"] = UDim2.new(0.0885, 0, 0.07471, 0);

unexpected_UI["CMDS_BUTTON"] = Instance.new("TextButton", unexpected_UI["MENUFRAME"]);
unexpected_UI["CMDS_BUTTON"]["BorderSizePixel"] = 0;
unexpected_UI["CMDS_BUTTON"]["TextSize"] = 18;
unexpected_UI["CMDS_BUTTON"]["TextColor3"] = FQ.COLORS.TEXT_MAIN
unexpected_UI["CMDS_BUTTON"]["BackgroundColor3"] = FQ.COLORS.BACKGROUND
unexpected_UI["CMDS_BUTTON"]["FontFace"] = FQ.FONTS.REGULAR
unexpected_UI["CMDS_BUTTON"]["Size"] = UDim2.new(0, 278, 0, 51)
unexpected_UI["CMDS_BUTTON"]["BorderColor3"] = FQ.COLORS.BACKGROUND
unexpected_UI["CMDS_BUTTON"]["Text"] = [[commands]]
unexpected_UI["CMDS_BUTTON"]["Name"] = [[cmdsButton]];
unexpected_UI["CMDS_BUTTON"]["Visible"] = true;
unexpected_UI["CMDS_BUTTON"]["Position"] = UDim2.new(0.0885, 0, 0.17241, 0);
CREATE_CORNER(unexpected_UI["CMDS_BUTTON"], 0.3, 0)
CREATE_STROKE(unexpected_UI["CMDS_BUTTON"], FQ.COLORS.STROKE);


unexpected_UI["DISCORD"] = Instance.new("TextButton", unexpected_UI["MENUFRAME"]);
unexpected_UI["DISCORD"]["BorderSizePixel"] = 0;
unexpected_UI["DISCORD"]["TextSize"] = 18;
unexpected_UI["DISCORD"]["TextColor3"] = FQ.COLORS.TEXT_MAIN;
unexpected_UI["DISCORD"]["BackgroundColor3"] = FQ.COLORS.BACKGROUND;
unexpected_UI["DISCORD"]["FontFace"] = FQ.FONTS.REGULAR;
unexpected_UI["DISCORD"]["Size"] = UDim2.new(0, 278, 0, 51);
unexpected_UI["DISCORD"]["BorderColor3"] = FQ.COLORS.BACKGROUND;
unexpected_UI["DISCORD"]["Text"] = [[discord]];
unexpected_UI["DISCORD"]["Name"] = [[discordButton]];
unexpected_UI["DISCORD"]["Visible"] = true;
unexpected_UI["DISCORD"]["Position"] = UDim2.new(0.0885, 0, 0.35991, 0);

unexpected_UI["DISCORD"].MouseButton1Click:Connect(function()
	setclipboard("https://discord.gg/J73SnGB2y2")
	if typeof(httprequest) == "function" then
		httprequest({
			Url = "http://127.0.0.1:6463/rpc?v=1",
			Method = "POST",
			Headers = {
				["Content-Type"] = "application/json",
				Origin = "https://discord.com"
			},
			Body = HS:JSONEncode({
				cmd = "INVITE_BROWSER",
				nonce = HS:GenerateGUID(false),
				args = { code = "J73SnGB2y2" }
			})
		})
	end
end)

CREATE_CORNER(unexpected_UI["DISCORD"], 0.3, 0)
CREATE_STROKE(unexpected_UI["DISCORD"], FQ.COLORS.STROKE);

unexpected_UI["INFO"] = Instance.new("TextButton", unexpected_UI["MENUFRAME"]);
unexpected_UI["INFO"]["BorderSizePixel"] = 0;
unexpected_UI["INFO"]["TextSize"] = 18;
unexpected_UI["INFO"]["TextColor3"] = FQ.COLORS.TEXT_MAIN;
unexpected_UI["INFO"]["BackgroundColor3"] = FQ.COLORS.BACKGROUND;
unexpected_UI["INFO"]["FontFace"] = FQ.FONTS.REGULAR;
unexpected_UI["INFO"]["Size"] = UDim2.new(0, 278, 0, 51);
unexpected_UI["INFO"]["BorderColor3"] = FQ.COLORS.BACKGROUND;
unexpected_UI["INFO"]["Text"] = [[info]];
unexpected_UI["INFO"]["Name"] = [[infoButton]];
unexpected_UI["INFO"]["Visible"] = true;
unexpected_UI["INFO"]["Position"] = UDim2.new(0.0885, 0, 0.55388, 0);
CREATE_CORNER(unexpected_UI["INFO"], 0.3, 0)
CREATE_STROKE(unexpected_UI["INFO"], FQ.COLORS.STROKE);

unexpected_UI["CMDFRAME"] = Instance.new("Frame", unexpected_UI["MENUFRAME"]);
unexpected_UI["CMDFRAME"]["BorderSizePixel"] = 0;
unexpected_UI["CMDFRAME"]["BackgroundColor3"] = Color3.fromRGB(255, 255, 255);
unexpected_UI["CMDFRAME"]["Size"] = UDim2.new(0, 339, 0, 348);
unexpected_UI["CMDFRAME"]["BorderColor3"] = FQ.COLORS.BACKGROUND;
unexpected_UI["CMDFRAME"]["Name"] = [[commandFrame]];
unexpected_UI["CMDFRAME"]["BackgroundTransparency"] = 1;
unexpected_UI["CMDFRAME"]["Visible"] = false;

unexpected_UI["BTNLIST"] = Instance.new("ScrollingFrame", unexpected_UI["CMDFRAME"]);
unexpected_UI["BTNLIST"]["Active"] = true;
unexpected_UI["BTNLIST"]["BorderSizePixel"] = 0;
unexpected_UI["BTNLIST"]["CanvasSize"] = UDim2.new(0, 0, 10, 0);
unexpected_UI["BTNLIST"]["BackgroundColor3"] = Color3.fromRGB(255, 255, 255);
unexpected_UI["BTNLIST"]["Name"] = [[buttonList]];
unexpected_UI["BTNLIST"]["Size"] = UDim2.new(0, 278, 0, 210);
unexpected_UI["BTNLIST"]["ScrollBarImageColor3"] = FQ.COLORS.ACCENT;
unexpected_UI["BTNLIST"]["Position"] = UDim2.new(0.0885, 0, 0.32184, 0);
unexpected_UI["BTNLIST"]["BorderColor3"] = FQ.COLORS.BACKGROUND;
unexpected_UI["BTNLIST"]["ScrollBarThickness"] = 1;
unexpected_UI["BTNLIST"]["BackgroundTransparency"] = 1;

unexpected_UI["CMDEXAMPLE"] = Instance.new("TextButton");
unexpected_UI["CMDEXAMPLE"]["BorderSizePixel"] = 0;
unexpected_UI["CMDEXAMPLE"]["TextXAlignment"] = Enum.TextXAlignment.Left;
unexpected_UI["CMDEXAMPLE"]["TextSize"] = 18;
unexpected_UI["CMDEXAMPLE"]["TextColor3"] = FQ.COLORS.TEXT_MAIN;
unexpected_UI["CMDEXAMPLE"]["BackgroundColor3"] = FQ.COLORS.BACKGROUND;
unexpected_UI["CMDEXAMPLE"]["FontFace"] = FQ.FONTS.REGULAR;
unexpected_UI["CMDEXAMPLE"]["Size"] = UDim2.new(0, 278, 0, 33);
unexpected_UI["CMDEXAMPLE"]["BorderColor3"] = FQ.COLORS.BACKGROUND;
unexpected_UI["CMDEXAMPLE"]["Text"] = [[command / command]];
unexpected_UI["CMDEXAMPLE"]["Name"] = [[commandExample]];
unexpected_UI["CMDEXAMPLE"]["Visible"] = false;

unexpected_UI["CMDBACK"] = Instance.new("ImageButton", unexpected_UI["CMDFRAME"]);
unexpected_UI["CMDBACK"]["BorderSizePixel"] = 0;
unexpected_UI["CMDBACK"]["BackgroundTransparency"] = 1;
unexpected_UI["CMDBACK"]["BackgroundColor3"] = Color3.fromRGB(255, 255, 255);
unexpected_UI["CMDBACK"]["ImageColor3"] = FQ.COLORS.ACCENT;
unexpected_UI["CMDBACK"]["Image"] = [[rbxassetid://10709812784]];
unexpected_UI["CMDBACK"]["Size"] = UDim2.new(0, 38, 0, 30);
unexpected_UI["CMDBACK"]["BorderColor3"] = FQ.COLORS.BACKGROUND;
unexpected_UI["CMDBACK"]["Name"] = [[commandBack]];
unexpected_UI["CMDBACK"]["Position"] = UDim2.new(0.0885, 0, 0.82759, 0);
CREATE_ASPECT(unexpected_UI["CMDBACK"])

local unexpected = {}
local commandListData = {}
local commandButtonCACHE = {}

function unexpected:addcmd(name, desc, func, aliases, usageArgs)
	aliases = aliases or {}
	usageArgs = usageArgs or {}

	local displayName = name
	local actualName = string.gsub(name, "^%[.-%]%s*", "")

	local entry = {
		Original = actualName,
		Description = desc,
		Execute = func,
		Aliases = aliases,
		UsageArgs = usageArgs,
		DisplayName = displayName,
	}
	commandListData[string.lower(actualName)] = entry
	for _, alias in ipairs(aliases) do
		commandListData[string.lower(alias)] = entry
	end
end

local function showCommands()
	local index = 0
	local used = {}
	for key, entry in pairs(commandListData) do
		if not used[entry] then
			used[entry] = true
			local btn = unexpected_UI["CMDEXAMPLE"]:Clone()
			local allNames = {entry.DisplayName}
			for _, alias in ipairs(entry.Aliases) do table.insert(allNames, alias) end
			btn.Text = table.concat(allNames, " / ")
			btn.Visible = true
			btn.Position = UDim2.new(0, 0, 0, index * 32)
			btn.Parent = unexpected_UI["BTNLIST"]

			local usage = "usage: " .. entry.Original
			if #entry.UsageArgs > 0 then usage = usage .. " [" .. table.concat(entry.UsageArgs, "] [") .. "]" end

			local tooltip = Instance.new("TextLabel")
			tooltip.BackgroundColor3 = FQ.COLORS.BACKGROUND
			tooltip.Visible = false
			tooltip.Font = Enum.Font.Gotham
			tooltip.TextColor3 = FQ.COLORS.TEXT_MAIN
			tooltip.TextSize = 18
			tooltip.TextWrapped = true
			tooltip.TextXAlignment = Enum.TextXAlignment.Left
			tooltip.TextYAlignment = Enum.TextYAlignment.Top
			tooltip.ZIndex = 9999
			tooltip.AutomaticSize = Enum.AutomaticSize.XY
			tooltip.Size = UDim2.new(0, 300, 0, 0)
			tooltip.Parent = unexpected_UI["UI"]
			tooltip.BorderSizePixel = 0

			local toolst = Instance.new("UIStroke")
			toolst.ApplyStrokeMode = Enum.ApplyStrokeMode.Border
			toolst.Color = FQ.COLORS.STROKE
			toolst.Parent = tooltip

			local corner = Instance.new("UICorner")
			corner.CornerRadius = UDim.new(0.1, 0)
			corner.Parent = tooltip

			local padding = Instance.new("UIPadding")
			padding.PaddingBottom = UDim.new(0, 6)
			padding.PaddingLeft = UDim.new(0, 8)
			padding.PaddingRight = UDim.new(0, 8)
			padding.Parent = tooltip

			local constraint = Instance.new("UITextSizeConstraint")
			constraint.MaxTextSize = 18
			constraint.Parent = tooltip

			local onHover = false
			local hoverToken = nil

			btn.MouseEnter:Connect(function()
				onHover = true
				local mousePos = UIS:GetMouseLocation() - GS:GetGuiInset()
				tooltip.Position = UDim2.new(0, mousePos.X + 10, 0, mousePos.Y + 10)
				tooltip.Text = entry.Description .. "\n" .. usage
				tooltip.Visible = true
				hoverToken = tick()
			end)

			btn.MouseLeave:Connect(function()
				local thisToken = tick()
				hoverToken = thisToken
				onHover = false
				if hoverToken == thisToken then
					tooltip.Visible = false
				end
			end)

			RS.RenderStepped:Connect(function()
                if onHover and tooltip.Visible then
                    local mousePos = UIS:GetMouseLocation() - GS:GetGuiInset()
                    tooltip.Position = UDim2.new(0, mousePos.X + 10, 0, mousePos.Y + 10)
                end
	        end)

			btn.MouseButton1Click:Connect(function()
				unexpected_UI["CLI"].Text = entry.Original
				task.wait(0.01)
				unexpected_UI["CLI"]:CaptureFocus()
			end)

			table.insert(commandButtonCACHE, btn)
			index += 1
		end
	end
	unexpected_UI["BTNLIST"].CanvasSize = UDim2.new(0, 0, 0, index * 32)
end

--#notification
local notificationQueue = {}
local isNotif = false
local notifUI = Instance.new("Frame")
notifUI.Name = "Notification"
notifUI.Parent = unexpected_UI["UI"]
notifUI.BackgroundColor3 = FQ.COLORS.BACKGROUND
notifUI.Position = UDim2.new(1, -378, 0.962686539, -189)
notifUI.Size = UDim2.new(0, 328, 0, 169)
notifUI.Visible = false
Instance.new("UICorner", notifUI).CornerRadius = UDim.new(0.2, 0)
Instance.new("UIStroke", notifUI).Color = FQ.COLORS.STROKE
 
local notiftitle = Instance.new("TextLabel", notifUI)
notiftitle.Name = "Title"
notiftitle.BackgroundTransparency = 1
notiftitle.Position = UDim2.new(0.088, 0, 0.176, 0)
notiftitle.Size = UDim2.new(0, 250, 0, 25)
notiftitle.Font = Enum.Font.GothamBold
notiftitle.Text = "Title"
notiftitle.TextColor3 = FQ.COLORS.TEXT_MAIN
notiftitle.TextSize = 25
notiftitle.TextXAlignment = Enum.TextXAlignment.Left

local notiftext = Instance.new("TextLabel", notifUI)
notiftext.Name = "Description"
notiftext.BackgroundTransparency = 1
notiftext.Position = UDim2.new(0.088, 0, 0.36, 0)
notiftext.Size = UDim2.new(0, 250, 0, 60)
notiftext.Font = Enum.Font.Gotham
notiftext.Text = "Description"
notiftext.TextColor3 = FQ.COLORS.TEXT_MAIN
notiftext.TextSize = 20
notiftext.TextWrapped = true
notiftext.TextXAlignment = Enum.TextXAlignment.Left
notiftext.TextYAlignment = Enum.TextYAlignment.Top

local loadingBar = Instance.new("Frame", notifUI)
loadingBar.Name = "Bar"
loadingBar.BackgroundColor3 = Color3.fromRGB(99, 99, 99)
loadingBar.Position = UDim2.new(0.09, 0, 0, 0)
loadingBar.Size = UDim2.new(0.82, 0,0, 1)

local notifPos = notifUI.Position

local function notifQueue()
	if #notificationQueue == 0 then
		isNotif = false

		local fadeOutTween = TS:Create(notifUI, TweenInfo.new(0.25), {
			BackgroundTransparency = 1,
			Position = notifPos + UDim2.new(0, 0, 0, 10),
		})

		for _, v in ipairs(notifUI:GetDescendants()) do
			if v:IsA("TextLabel") then
				TS:Create(v, TweenInfo.new(0.25), {TextTransparency = 1}):Play()
			end
		end

		fadeOutTween:Play()

		task.delay(0.3, function()
			notifUI.Visible = false
			notifUI.Position = notifPos
			notifUI.BackgroundTransparency = 0
			for _, v in ipairs(notifUI:GetDescendants()) do
				if v:IsA("TextLabel") then
					v.TextTransparency = 0
				end
			end
		end)
		return
	end

	isNotif = true
	local data = table.remove(notificationQueue, 1)

	local total = #notificationQueue + 1
	notiftitle.Text = string.format("%s (%d)", tostring(data.title), total)
	notiftext.Text = tostring(data.text)
	loadingBar.Size = UDim2.new(0.82, 0, 0, 1)
	notifUI.Visible = true

	if total == 1 then
		notifUI.BackgroundTransparency = 1
		for _, v in ipairs(notifUI:GetDescendants()) do
			if v:IsA("TextLabel") then
				v.TextTransparency = 1
			end
		end

		TS:Create(notifUI, TweenInfo.new(0.25), {
			BackgroundTransparency = 0,
			Position = notifPos,
		}):Play()

		for _, v in ipairs(notifUI:GetDescendants()) do
			if v:IsA("TextLabel") then
				TS:Create(v, TweenInfo.new(0.25), {TextTransparency = 0}):Play()
			end
		end
	end

	local barTween = TS:Create(loadingBar, TweenInfo.new(5, Enum.EasingStyle.Linear), {
		Size = UDim2.new(0, 0, 0, 1)
	})
	barTween:Play()

	task.delay(5, notifQueue)
end

function unexpected:notify(title, ...)
	local args = {...}
	local text = table.concat(args, " ")

	table.insert(notificationQueue, {
		title = tostring(title or "Notification"),
		text = text
	})

	if isNotif then
		local currentTitle = string.match(notiftitle.Text, "^(.-) %(%d+%)$") or notiftitle.Text
		notiftitle.Text = string.format("%s (%d)", currentTitle, #notificationQueue + 1)
	else
		notifQueue()
	end
end

--#inputs
unexpected_UI["CLI"]:GetPropertyChangedSignal("Text"):Connect(function()
	local input = unexpected_UI["CLI"].Text
	local cmdName = string.match(input, "^%S+") or ""
	local suggestion = ""

	if input ~= "" then
		local bestMatch = nil
		for key, data in pairs(commandListData) do
			if string.sub(key, 1, #cmdName) == string.lower(cmdName) then
				if not bestMatch or key < bestMatch.key then
					bestMatch = { key = key, data = data }
				end
			end
		end

		if bestMatch then
			local completion = string.sub(bestMatch.key, #cmdName + 1)
			suggestion = input .. completion
		end
	end

	unexpected_UI["PREDICTOR"].Text = suggestion
end)

unexpected_UI["CLI"].FocusLost:Connect(function(enterPressed)
	if enterPressed then
		local inputText = unexpected_UI["CLI"].Text
		local cmdName, argsText = string.match(inputText, "^(%S+)%s*(.*)$")
		if not cmdName then return end

		local cmd = commandListData[string.lower(cmdName)]
		if cmd then
			local args = {}
			for arg in string.gmatch(argsText, "%S+") do
				table.insert(args, arg)
			end
			cmd.Execute(table.unpack(args))
		end

		unexpected_UI["CLI"].Text = ""
		unexpected_UI["PREDICTOR"].Text = ""
	end
end)
--#inputsEnd

unexpected_UI["SEARCHBAR"] = Instance.new("TextBox", unexpected_UI["CMDFRAME"]);
unexpected_UI["SEARCHBAR"]["CursorPosition"] = -1;
unexpected_UI["SEARCHBAR"]["Name"] = [[searchBar]];
unexpected_UI["SEARCHBAR"]["PlaceholderColor3"] = FQ.COLORS.TEXT_DIM;
unexpected_UI["SEARCHBAR"]["BorderSizePixel"] = 0;
unexpected_UI["SEARCHBAR"]["TextSize"] = 18;
unexpected_UI["SEARCHBAR"]["TextColor3"] = FQ.COLORS.TEXT_MAIN;
unexpected_UI["SEARCHBAR"]["BackgroundColor3"] = Color3.fromRGB(255, 255, 255);
unexpected_UI["SEARCHBAR"]["FontFace"] = FQ.FONTS.REGULAR;
unexpected_UI["SEARCHBAR"]["PlaceholderText"] = [[search a command]];
unexpected_UI["SEARCHBAR"]["Size"] = UDim2.new(0, 278, 0, 41);
unexpected_UI["SEARCHBAR"]["Position"] = UDim2.new(0.0885, 0, 0.17816, 0);
unexpected_UI["SEARCHBAR"]["BorderColor3"] = FQ.COLORS.BACKGROUND;
unexpected_UI["SEARCHBAR"]["Text"] = [[]];
unexpected_UI["SEARCHBAR"]["BackgroundTransparency"] = 1;

local function updateList(filter)
	filter = string.lower(filter)
	local all, visible = {}, {}

	for _, c in ipairs(unexpected_UI["BTNLIST"]:GetChildren()) do
		if c:IsA("TextButton") then
			table.insert(all, c)
			if c.Visible then table.insert(visible, c) end
		end
	end

	if filter == "" then
		for i, btn in ipairs(all) do
			btn.Position = UDim2.new(0, 0, 0, (i - 1) * 32)
		end
		return
	end

	table.sort(visible, function(a, b)
		local am = string.find(string.lower(a.Text), filter) and 1 or 0
		local bm = string.find(string.lower(b.Text), filter) and 1 or 0
		return am > bm or (am == bm and a.Text < b.Text)
	end)

	for i, btn in ipairs(visible) do
		btn.Position = UDim2.new(0, 0, 0, (i - 1) * 32)
	end
end

unexpected_UI["SEARCHBAR"]:GetPropertyChangedSignal("Text"):Connect(function()
	updateList(unexpected_UI["SEARCHBAR"].Text)
end)
--#searchEnd

unexpected_UI["INFOFRAME"] = Instance.new("Frame", unexpected_UI["MENUFRAME"]);
unexpected_UI["INFOFRAME"]["Visible"] = false;
unexpected_UI["INFOFRAME"]["BorderSizePixel"] = 0;
unexpected_UI["INFOFRAME"]["BackgroundColor3"] = Color3.fromRGB(255, 255, 255);
unexpected_UI["INFOFRAME"]["Size"] = UDim2.new(0, 339, 0, 348);
unexpected_UI["INFOFRAME"]["BorderColor3"] = FQ.COLORS.BACKGROUND;
unexpected_UI["INFOFRAME"]["Name"] = [[infoFrame]];

unexpected_UI["PROFILEGRADIENT"] = Instance.new("UIGradient", unexpected_UI["INFOFRAME"]);
unexpected_UI["PROFILEGRADIENT"]["Rotation"] = -109;
unexpected_UI["PROFILEGRADIENT"]["Color"] = ColorSequence.new{ColorSequenceKeypoint.new(0.000, FQ.COLORS.BACKGROUND),ColorSequenceKeypoint.new(0.225, FQ.COLORS.BACKGROUND),ColorSequenceKeypoint.new(1.000, Color3.fromRGB(50, 0, 0))};

unexpected_UI["PROFILEIMAGE"] = Instance.new("ImageLabel", unexpected_UI["INFOFRAME"]);
unexpected_UI["PROFILEIMAGE"]["BorderSizePixel"] = 0;
unexpected_UI["PROFILEIMAGE"]["BackgroundColor3"] = Color3.fromRGB(255, 255, 255);
unexpected_UI["PROFILEIMAGE"]["Image"] = [[rbxassetid://12850203451]];
unexpected_UI["PROFILEIMAGE"]["Size"] = UDim2.new(0, 100, 0, 100);
unexpected_UI["PROFILEIMAGE"]["BorderColor3"] = FQ.COLORS.BACKGROUND;
unexpected_UI["PROFILEIMAGE"]["BackgroundTransparency"] = 1;
unexpected_UI["PROFILEIMAGE"]["Name"] = [[profile]];
unexpected_UI["PROFILEIMAGE"]["Position"] = UDim2.new(0.0885, 0, 0.18391, 0);
CREATE_CORNER(unexpected_UI["PROFILEIMAGE"], 1, 0)
CREATE_CORNER(unexpected_UI["INFOFRAME"], 1, 0)

unexpected_UI["INFONAME"] = Instance.new("TextLabel", unexpected_UI["INFOFRAME"]);
unexpected_UI["INFONAME"]["BorderSizePixel"] = 0;
unexpected_UI["INFONAME"]["TextSize"] = 20;
unexpected_UI["INFONAME"]["TextXAlignment"] = Enum.TextXAlignment.Left;
unexpected_UI["INFONAME"]["BackgroundColor3"] = Color3.fromRGB(255, 255, 255);
unexpected_UI["INFONAME"]["FontFace"] = FQ.FONTS.ITALIC;
unexpected_UI["INFONAME"]["TextColor3"] = FQ.COLORS.TEXT_MAIN;
unexpected_UI["INFONAME"]["BackgroundTransparency"] = 1;
unexpected_UI["INFONAME"]["Size"] = UDim2.new(0, 85, 0, 26);
unexpected_UI["INFONAME"]["BorderColor3"] = FQ.COLORS.BACKGROUND;
unexpected_UI["INFONAME"]["Text"] = LP.Name;
unexpected_UI["INFONAME"]["Name"] = [[name]];
unexpected_UI["INFONAME"]["Position"] = UDim2.new(0.43068, 0, 0.25287, 0);

unexpected_UI["STATUS"] = Instance.new("TextLabel", unexpected_UI["INFOFRAME"]);
unexpected_UI["STATUS"]["BorderSizePixel"] = 0;
unexpected_UI["STATUS"]["TextSize"] = 16;
unexpected_UI["STATUS"]["TextXAlignment"] = Enum.TextXAlignment.Left;
unexpected_UI["STATUS"]["BackgroundColor3"] = Color3.fromRGB(255, 255, 255);
unexpected_UI["STATUS"]["FontFace"] = FQ.FONTS.ITALIC;
unexpected_UI["STATUS"]["TextColor3"] = FQ.COLORS.TEXT_MAIN;
unexpected_UI["STATUS"]["BackgroundTransparency"] = 1;
unexpected_UI["STATUS"]["Size"] = UDim2.new(0, 168, 0, 26);
unexpected_UI["STATUS"]["BorderColor3"] = FQ.COLORS.BACKGROUND;
unexpected_UI["STATUS"]["Text"] = [[using unexpected]];
unexpected_UI["STATUS"]["Name"] = [[status]];
unexpected_UI["STATUS"]["Position"] = UDim2.new(0.43068, 0, 0.32759, 0);

unexpected_UI["WTF"] = Instance.new("TextLabel", unexpected_UI["INFOFRAME"]);
unexpected_UI["WTF"]["BorderSizePixel"] = 0;
unexpected_UI["WTF"]["TextSize"] = 20;
unexpected_UI["WTF"]["TextXAlignment"] = Enum.TextXAlignment.Left;
unexpected_UI["WTF"]["BackgroundColor3"] = Color3.fromRGB(255, 255, 255);
unexpected_UI["WTF"]["FontFace"] = FQ.FONTS.REGULAR;
unexpected_UI["WTF"]["TextColor3"] = FQ.COLORS.TEXT_MAIN;
unexpected_UI["WTF"]["BackgroundTransparency"] = 1;
unexpected_UI["WTF"]["Size"] = UDim2.new(0, 265, 0, 26);
unexpected_UI["WTF"]["BorderColor3"] = FQ.COLORS.BACKGROUND;
unexpected_UI["WTF"].Text = "this is wip"
unexpected_UI["WTF"]["Name"] = [[position]];
unexpected_UI["WTF"]["Position"] = UDim2.new(0.10914, 0, 0.52299, 0);

unexpected_UI["USINGUX"] = Instance.new("TextLabel", unexpected_UI["INFOFRAME"]);
unexpected_UI["USINGUX"]["BorderSizePixel"] = 0;
unexpected_UI["USINGUX"]["TextSize"] = 20;
unexpected_UI["USINGUX"]["TextXAlignment"] = Enum.TextXAlignment.Left;
unexpected_UI["USINGUX"]["BackgroundColor3"] = Color3.fromRGB(255, 255, 255);
unexpected_UI["USINGUX"]["FontFace"] = FQ.FONTS.REGULAR;
unexpected_UI["USINGUX"]["TextColor3"] = FQ.COLORS.TEXT_MAIN;
unexpected_UI["USINGUX"]["BackgroundTransparency"] = 1;
unexpected_UI["USINGUX"]["Size"] = UDim2.new(0, 265, 0, 26);
unexpected_UI["USINGUX"]["BorderColor3"] = FQ.COLORS.BACKGROUND;
unexpected_UI["USINGUX"]["Text"] = "using hashed "..currentVersion;
unexpected_UI["USINGUX"]["Name"] = [[uptime]];
unexpected_UI["USINGUX"]["Position"] = UDim2.new(0.10914, 0, 0.5977, 0);

unexpected_UI["WS"] = Instance.new("TextLabel", unexpected_UI["INFOFRAME"]);
unexpected_UI["WS"]["BorderSizePixel"] = 0;
unexpected_UI["WS"]["TextSize"] = 20;
unexpected_UI["WS"]["TextXAlignment"] = Enum.TextXAlignment.Left;
unexpected_UI["WS"]["BackgroundColor3"] = Color3.fromRGB(255, 255, 255);
unexpected_UI["WS"]["FontFace"] = FQ.FONTS.REGULAR;
unexpected_UI["WS"]["TextColor3"] = FQ.COLORS.TEXT_MAIN;
unexpected_UI["WS"]["BackgroundTransparency"] = 1;
unexpected_UI["WS"]["Size"] = UDim2.new(0, 265, 0, 26);
unexpected_UI["WS"]["BorderColor3"] = FQ.COLORS.BACKGROUND;
unexpected_UI["WS"]["Text"] = HUM.WalkSpeed;
unexpected_UI["WS"]["Name"] = [[walkspeed]];
unexpected_UI["WS"]["Position"] = UDim2.new(0.10914, 0, 0.67241, 0);

unexpected_UI["JP"] = Instance.new("TextLabel", unexpected_UI["INFOFRAME"]);
unexpected_UI["JP"]["BorderSizePixel"] = 0;
unexpected_UI["JP"]["TextSize"] = 20;
unexpected_UI["JP"]["TextXAlignment"] = Enum.TextXAlignment.Left;
unexpected_UI["JP"]["BackgroundColor3"] = Color3.fromRGB(255, 255, 255);
unexpected_UI["JP"]["FontFace"] = FQ.FONTS.REGULAR;
unexpected_UI["JP"]["TextColor3"] = FQ.COLORS.TEXT_MAIN;
unexpected_UI["JP"]["BackgroundTransparency"] = 1;
unexpected_UI["JP"]["Size"] = UDim2.new(0, 265, 0, 26);
unexpected_UI["JP"]["BorderColor3"] = FQ.COLORS.BACKGROUND;
unexpected_UI["JP"]["Text"] = HUM.JumpPower;
unexpected_UI["JP"]["Name"] = [[jumppower]];
unexpected_UI["JP"]["Position"] = UDim2.new(0.10914, 0, 0.74713, 0);

unexpected_UI["BACK"] = Instance.new("ImageButton", unexpected_UI["INFOFRAME"]);
unexpected_UI["BACK"]["BorderSizePixel"] = 0;
unexpected_UI["BACK"]["BackgroundTransparency"] = 1;
unexpected_UI["BACK"]["BackgroundColor3"] = Color3.fromRGB(255, 255, 255);
unexpected_UI["BACK"]["ImageColor3"] = FQ.COLORS.ACCENT;
unexpected_UI["BACK"]["Image"] = [[rbxassetid://10709812784]];
unexpected_UI["BACK"]["Size"] = UDim2.new(0, 38, 0, 30);
unexpected_UI["BACK"]["BorderColor3"] = FQ.COLORS.BACKGROUND;
unexpected_UI["BACK"]["Name"] = [[infoBack]];
unexpected_UI["BACK"]["Position"] = UDim2.new(0.0885, 0, 0.82759, 0);
CREATE_ASPECT(unexpected_UI["BACK"]);

unexpected_UI["LABEL2"] = Instance.new("TextLabel", unexpected_UI["MENUFRAME"]);
unexpected_UI["LABEL2"]["TextWrapped"] = true;
unexpected_UI["LABEL2"]["ZIndex"] = 2;
unexpected_UI["LABEL2"]["TextSize"] = 17;
unexpected_UI["LABEL2"]["TextXAlignment"] = Enum.TextXAlignment.Left;
unexpected_UI["LABEL2"]["TextYAlignment"] = Enum.TextYAlignment.Bottom;
unexpected_UI["LABEL2"]["BackgroundColor3"] = Color3.fromRGB(255, 255, 255);
unexpected_UI["LABEL2"]["FontFace"] = FQ.FONTS.REGULAR;
unexpected_UI["LABEL2"]["TextColor3"] = FQ.COLORS.ACCENT;
unexpected_UI["LABEL2"]["BackgroundTransparency"] = 1;
unexpected_UI["LABEL2"]["Size"] = UDim2.new(0, 163, 0, 19);
unexpected_UI["LABEL2"]["BorderColor3"] = FQ.COLORS.BACKGROUND;
unexpected_UI["LABEL2"]["Text"] = [[wip]];
unexpected_UI["LABEL2"]["Name"] = [[Label]];
unexpected_UI["LABEL2"]["Position"] = UDim2.new(0.29499, 0, 0.07471, 0);

--#utils
local configFile = "unexpected_config.json"
local defaultConfig = {
    keepUX = true,
    Plugins = {}
}

CONFIG = CONFIG or {}

local function lc()
    local config = {}
    if isfile(configFile) then
        local success, content = pcall(readfile, configFile)
        if success and content then
            local ok, parsed = pcall(function()
                return HS:JSONDecode(content)
            end)
            if ok and typeof(parsed) == "table" then
                config = parsed
            end
        end
    end
    for key, default in pairs(defaultConfig) do
        if config[key] == nil then
            config[key] = default
        end
        getgenv()[key] = config[key]
    end
    CONFIG = config
    return config
end

function UX_rconfig()
    CONFIG = lc()
    pcall(writefile, configFile, HS:JSONEncode(CONFIG))
end

function UX_config()
    if not CONFIG then CONFIG = lc() end
    pcall(writefile, configFile, HS:JSONEncode(CONFIG))
end
--#utilsEnd

--#imports
local MENU = unexpected_UI["PILL"]:FindFirstChild("Menu")
local CLI = unexpected_UI["PILL"]:FindFirstChild("CLI")
local MENUFRAME = unexpected_UI["PILL"]:WaitForChild("MenuFrame")
local LASTFOCUSED = os.clock()
local HIDDEN = false

local indicator = Instance.new("ImageButton")
indicator.Size = UDim2.new(0, 20, 0, 20)
indicator.Position = UDim2.new(0, 20, 1, -40)
indicator.BackgroundColor3 = Color3.fromRGB(80, 80, 80)
indicator.Visible = false
indicator.ZIndex = 20
indicator.Parent = unexpected_UI["PILL"].Parent
indicator.BorderSizePixel = 0
Instance.new("UICorner", indicator).CornerRadius = UDim.new(1, 0)
--#importesEnd

--#initiliaze
unexpected_UI["PILL"].AnchorPoint = Vector2.new(0.5, 0.5)
unexpected_UI["PILL"].Position = UDim2.new(0.5, 0, 1, -150)
unexpected_UI["PILL"].Visible = false
MENUFRAME.AnchorPoint = Vector2.new(0.5, 1)
MENUFRAME.Position = UDim2.new(0.5, 0, 1, -80)
MENUFRAME.Size = UDim2.new(0, 339, 0, 0)
--#initializeEnd

local MENUON, HOVERED, shithover = false, false, false
local MENUFRAMES = {
	command = MENUFRAME:WaitForChild("commandFrame"),
	info = MENUFRAME:WaitForChild("infoFrame")
}
local MENUS = {
	MENUFRAME:WaitForChild("cmdsButton"),
	MENUFRAME:WaitForChild("infoButton"),
	MENUFRAME:WaitForChild("discordButton")
}

--#fadesHandler
local function buttonTP(button, target)
	local prop = button:IsA("ImageButton") and "ImageTransparency" or "TextTransparency"
	TS:Create(button, TweenInfo.new(0.2, Enum.EasingStyle.Sine), { [prop] = target }):Play()
end

local function fadeIn(frame)
	frame.Visible = true
	for _, c in frame:GetDescendants() do
		if c:IsA("TextLabel") or c:IsA("TextButton") or c:IsA("TextBox") then
			c.TextTransparency = 1
			TS:Create(c, TweenInfo.new(0.2, Enum.EasingStyle.Sine), { TextTransparency = 0 }):Play()
		elseif c:IsA("ImageLabel") or c:IsA("ImageButton") then
			c.ImageTransparency = 1
			TS:Create(c, TweenInfo.new(0.2, Enum.EasingStyle.Sine), { ImageTransparency = 0 }):Play()
		end
	end
end

local function fadeOut(frame)
	for _, c in frame:GetDescendants() do
		if c:IsA("TextLabel") or c:IsA("TextButton") or c:IsA("TextBox") then
			TS:Create(c, TweenInfo.new(0.2, Enum.EasingStyle.Sine), { TextTransparency = 1 }):Play()
		elseif c:IsA("ImageLabel") or c:IsA("ImageButton") then
			TS:Create(c, TweenInfo.new(0.2, Enum.EasingStyle.Sine), { ImageTransparency = 1 }):Play()
		end
	end
	task.delay(0.2, function() frame.Visible = false end)
end

RS.Heartbeat:Connect(function()
	local m = LP:GetMouse()
	local mp, pos, size = Vector2.new(m.X, m.Y), unexpected_UI["PILL"].AbsolutePosition, unexpected_UI["PILL"].AbsoluteSize
	shithover = mp.X >= pos.X and mp.X <= pos.X + size.X and mp.Y >= pos.Y and mp.Y <= pos.Y + size.Y
end)

--#fucktween
local function SHS(hovered)
	if MOBILE then
		HOVERED = true
		unexpected_UI["PILL"].Size, unexpected_UI["CLI"].Size = UDim2.new(0, 339, 0, 71), UDim2.new(0, 230, 0, 54)
		unexpected_UI["MENU"].ImageTransparency = 0
		buttonTP(MENU, 0)
		return
	end
	if MENUON and hovered then
		HOVERED = true
		TS:Create(unexpected_UI["PILL"], TweenInfo.new(0.25, Enum.EasingStyle.Quint), { Size = UDim2.new(0, 339, 0, 71) }):Play()
		local NS = UDim2.new(0, 230, 0, 54)
        TS:Create(CLI, TweenInfo.new(0.25, Enum.EasingStyle.Quint), { Size = NS }):Play()
        TS:Create(unexpected_UI["PREDICTOR"], TweenInfo.new(0.25, Enum.EasingStyle.Quint), { Size = NS }):Play()
		buttonTP(MENU, 0)
		return
	end
	HOVERED = hovered
	local gSize = hovered and 339 or 218
	local cSize = hovered and 230 or 167
	TS:Create(unexpected_UI["PILL"], TweenInfo.new(0.25, Enum.EasingStyle.Quint), { Size = UDim2.new(0, gSize, 0, 71) }):Play()
	TS:Create(CLI, TweenInfo.new(0.25, Enum.EasingStyle.Quint), { Size = UDim2.new(0, cSize, 0, 54) }):Play()
	buttonTP(MENU, hovered and 0 or 1)
end

unexpected_UI["PILL"].InputBegan:Connect(function(input)
	if input.UserInputType == Enum.UserInputType.MouseMovement then
		shithover = true
		LASTFOCUSED = os.clock()
		SHS(true)
	end
end)

unexpected_UI["PILL"].InputEnded:Connect(function(input)
	if input.UserInputType == Enum.UserInputType.MouseMovement then
		task.delay(0.05, function()
			shithover = false
			if not CLI:IsFocused() and not MENUON then SHS(false) end
		end)
	end
end)

MENU.MouseButton1Click:Connect(function()
	LASTFOCUSED = os.clock()
	MENUON = not MENUON
	if MENUON then
		MENUFRAME.Size, MENUFRAME.Visible = UDim2.new(0, 339, 0, 0), true
		TS:Create(unexpected_UI["PILL"], TweenInfo.new(0.25, Enum.EasingStyle.Quint), { Size = UDim2.new(0, 339, 0, 71) }):Play()
		local NS = UDim2.new(0, 230, 0, 54)
        TS:Create(CLI, TweenInfo.new(0.25, Enum.EasingStyle.Quint), { Size = NS }):Play()
        TS:Create(unexpected_UI["PREDICTOR"], TweenInfo.new(0.25, Enum.EasingStyle.Quint), { Size = NS }):Play()
		TS:Create(MENUFRAME, TweenInfo.new(0.25, Enum.EasingStyle.Quint), { Size = UDim2.new(0, 339, 0, 348) }):Play()
		buttonTP(MENU, 0)
	else
		local collapse = TS:Create(MENUFRAME, TweenInfo.new(0.25, Enum.EasingStyle.Quint), { Size = UDim2.new(0, 339, 0, 0) })
		collapse:Play()
		collapse.Completed:Once(function()
			if not MENUON then MENUFRAME.Visible = false end
		end)
		SHS(HOVERED)
	end
end)

MENUS[1].MouseButton1Click:Connect(function()
	for _, b in ipairs(MENUS) do b.Visible = false end
	showCommands()
	fadeIn(MENUFRAMES.command)
end)

MENUS[2].MouseButton1Click:Connect(function()
	for _, b in ipairs(MENUS) do b.Visible = false end
	fadeIn(MENUFRAMES.info)
end)

MENUFRAMES.command:WaitForChild("commandBack").MouseButton1Click:Connect(function()
    fadeOut(MENUFRAMES.command)
    for _, child in ipairs(unexpected_UI["UI"]:GetChildren()) do
        if child:IsA("TextLabel") and child.Visible and child.Text ~= "" and child.Size.X.Offset == 300 then
            child.Visible = false
        end
    end
    task.delay(0.1, function() for _, b in ipairs(MENUS) do b.Visible = true end end)
end)

MENUFRAMES.info:WaitForChild("infoBack").MouseButton1Click:Connect(function()
	fadeOut(MENUFRAMES.info)
	task.delay(0.1, function() for _, b in ipairs(MENUS) do b.Visible = true end end)
end)

local function hidePILL()
	for _, c in ipairs(unexpected_UI["PILL"]:GetDescendants()) do
		if c:IsA("TextLabel") or c:IsA("TextButton") or c:IsA("TextBox") then
			TS:Create(c, TweenInfo.new(0.2, Enum.EasingStyle.Sine), { TextTransparency = 1 }):Play()
		elseif c:IsA("ImageLabel") or c:IsA("ImageButton") then
			TS:Create(c, TweenInfo.new(0.2, Enum.EasingStyle.Sine), { ImageTransparency = 1 }):Play()
		end
	end
	local shrink = TS:Create(unexpected_UI["PILL"], TweenInfo.new(0.25, Enum.EasingStyle.Quint), { Size = UDim2.new(0, 0, 0, 0) })
	shrink:Play()
	shrink.Completed:Once(function()
		unexpected_UI["PILL"].Visible = false
		indicator.Visible = true
	end)
end

RS.Heartbeat:Connect(function()
	if not CLI:IsFocused() and not MENUON and os.clock() - LASTFOCUSED > 5 and not HIDDEN then
		HIDDEN = true
		hidePILL()
	end
end)

local oneMenu = false
local function showPILL(yn)
	unexpected_UI["PILL"].Visible = true
	unexpected_UI["PILL"].Size = UDim2.new(0, 218, 0, 71)
	HIDDEN = false
	LASTFOCUSED = os.clock()
	indicator.Visible = false
	if MOBILE and not MENUON then SHS(true) end
	for _, c in ipairs(unexpected_UI["PILL"]:GetDescendants()) do
		if c:IsA("TextLabel") or c:IsA("TextButton") or c:IsA("TextBox") then
			TS:Create(c, TweenInfo.new(0.2, Enum.EasingStyle.Sine), { TextTransparency = 0 }):Play()
		elseif c:IsA("ImageLabel") or c:IsA("ImageButton") then
			if not oneMenu then
				c.ImageTransparency = 1
				oneMenu = true
			elseif yn == 1 then
				TS:Create(c, TweenInfo.new(0.2, Enum.EasingStyle.Sine), { ImageTransparency = 0 }):Play()
			else
				c.ImageTransparency = 1
			end
		end
	end
end

indicator.MouseButton1Click:Connect(function() showPILL() end)
CLI.Focused:Connect(function() LASTFOCUSED = os.clock() end)
CLI.FocusLost:Connect(function()
	LASTFOCUSED = os.clock()
	task.delay(0.05, function()
		if not shithover and not MENUON then SHS(false) end
	end)
end)

UIS.InputBegan:Connect(function(input, processed)
	if not processed and input.KeyCode == Enum.KeyCode.Semicolon then
		task.wait(0.01)
		CLI.Text, unexpected_UI["PREDICTOR"].Text = "", ""
		CLI:CaptureFocus()
		LASTFOCUSED = os.clock()
		showPILL(1)
		if shithover or MENUON then
			unexpected_UI["PILL"].Size = UDim2.new(0, 339, 0, 71)
			CLI.Size = UDim2.new(0, 230, 0, 54)
			unexpected_UI["PREDICTOR"].Size = UDim2.new(0, 230, 0, 54)
			unexpected_UI["MENU"].ImageTransparency = 0
			buttonTP(MENU, 0)
		else
			SHS(true)
			TS:Create(unexpected_UI["PILL"], TweenInfo.new(0.25, Enum.EasingStyle.Quint), { Size = UDim2.new(0, 339, 0, 71) }):Play()
			local NS = UDim2.new(0, 230, 0, 54)
			TS:Create(CLI, TweenInfo.new(0.25, Enum.EasingStyle.Quint), { Size = NS }):Play()
			TS:Create(unexpected_UI["PREDICTOR"], TweenInfo.new(0.25, Enum.EasingStyle.Quint), { Size = NS }):Play()
			buttonTP(MENU, 0)
		end
	end
end)

UIS.InputEnded:Connect(function(input, processed)
	if input.KeyCode == Enum.KeyCode.Semicolon then
		HOVERED = false
		if not shithover and not MENUON and not CLI:IsFocused() then
			TS:Create(unexpected_UI["PILL"], TweenInfo.new(0.25, Enum.EasingStyle.Quint), { Size = UDim2.new(0, 218, 0, 71) }):Play()
			TS:Create(CLI, TweenInfo.new(0.25, Enum.EasingStyle.Quint), { Size = UDim2.new(0, 167, 0, 54) }):Play()
			buttonTP(MENU, 1)
		elseif MENUON then
			unexpected_UI["PILL"].Size, CLI.Size = UDim2.new(0, 339, 0, 71), UDim2.new(0, 230, 0, 54)
			buttonTP(MENU, 0)
		end
	end
end)

UX_rconfig()

--#pluginSystem
local PLUGIN_DIR = "unexpected_plugins"
if not isfolder(PLUGIN_DIR) then
    makefolder(PLUGIN_DIR)
end

if type(CONFIG.Plugins) ~= "table" then
    CONFIG.Plugins = {}
end

local function LOAD_PLUGIN(NAME)
    local PATH = string.format("%s/%s.ux", PLUGIN_DIR, NAME)
    if not isfile(PATH) then
        unexpected:notify("unexpected", ("Plugin '%s' missing, removed from config."):format(NAME))
        CONFIG.Plugins[NAME] = nil
        UX_config()
        return false
    end

    local ENV = setmetatable({ unexpected = unexpected }, { __index = getfenv() })

    local OK, RESULT = pcall(function()
        return setfenv(loadstring(readfile(PATH)), ENV)()
    end)

    if not OK then
        unexpected:notify("unexpected", ("Error in plugin '%s': %s"):format(NAME, tostring(RESULT)))
        return false
    end

    if type(RESULT) == "table" and RESULT.Commands then
        for CMD_NAME, CMD in pairs(RESULT.Commands) do
            if type(CMD.Function) == "function" then
                unexpected:addcmd(
                    CMD.ListName or CMD_NAME,
                    CMD.Description or "No description.",
                    CMD.Function,
                    CMD.Aliases or {},
                    CMD.Args or {}
                )
            end
        end
    end

    unexpected:notify("unexpected", "Loaded plugin: " .. (RESULT.PluginName or NAME))
    return true
end

for NAME, ENABLED in pairs(CONFIG.Plugins) do
    if ENABLED then
        LOAD_PLUGIN(NAME)
    end
end

unexpected:addcmd("plugin", "Add a plugin", function(NAME)
    if not NAME or NAME == "" then
        return unexpected:notify("unexpected", "Usage: plugin [name]")
    end
    if LOAD_PLUGIN(NAME) then
        CONFIG.Plugins[NAME] = true
        UX_config()
    end
end, nil, {"name"})


unexpected:addcmd("unplugin", "Remove a plugin", function(NAME)
    if not NAME or NAME == "" then
        return unexpected:notify("unexpected", "Usage: unplugin [name]")
    end
    if CONFIG.Plugins[NAME] then
        CONFIG.Plugins[NAME] = nil
        UX_config()
        unexpected:notify("unexpected", "Plugin '" .. NAME .. "' removed.")
    else
        unexpected:notify("unexpected", "Plugin '" .. NAME .. "' is not enabled.")
    end
end, nil, {"name"})
--#pluginSystemEnd

--#commands
unexpected:addcmd("discord", "Discord Server", function()
    setclipboard("https://discord.gg/J73SnGB2y2")
	if typeof(httprequest) == "function" then
		httprequest({
			Url = "http://127.0.0.1:6463/rpc?v=1",
			Method = "POST",
			Headers = {
				["Content-Type"] = "application/json",
				Origin = "https://discord.com"
			},
			Body = HS:JSONEncode({
				cmd = "INVITE_BROWSER",
				nonce = HS:GenerateGUID(false),
				args = { code = "J73SnGB2y2" }
			})
		})
	end
end, nil, nil)


unexpected:addcmd("unexspy", "Remote spy", function()
	unexpected:notify("unexspy", "Running")
	loadstring(game:HttpGet("https://raw.githubusercontent.com/hashed-cmd/unexpected-cmd/refs/heads/main/misc/unexspy",true))()
end, {"remotespy"}, nil)

unexpected:addcmd("goto", "Teleport to a player", function(targetName)
	local name = targetName:lower()
	local target
	if name == "random" then
		local t = {} for _, p in ipairs(PLRS:GetPlayers()) do if p ~= LP then t[#t+1] = p end end
		target = #t > 0 and t[math.random(#t)] or nil
	else
		for _, p in ipairs(PLRS:GetPlayers()) do
			if p.Name:lower() == name or p.DisplayName:lower() == name then target = p break end
		end
	end
	local root = target and target.Character and target.Character:FindFirstChild("HumanoidRootPart")
	if root then HRP.CFrame = root.CFrame + Vector3.new(0, 3, 0) end
end, nil, {"playerName"})

local noclip
unexpected:addcmd("noclip", "Walk through walls", function()
    if noclip then return unexpected:notify("noclip", "Already noclipping.") end
    noclip = RS.Stepped:Connect(function()
        for _, p in ipairs(CHAR:GetDescendants()) do
            if typeof(p) == "Instance" and p:IsA("BasePart") then p.CanCollide = false end
        end
    end)
end)

unexpected:addcmd("unnoclip", "Disable noclip", function()
    if noclip then
        noclip:Disconnect()
        noclip = nil
    end
    for _, p in ipairs(CHAR:GetDescendants()) do
        if typeof(p) == "Instance" and p:IsA("BasePart") then p.CanCollide = true end
    end
end, {"clip"}, nil)

unexpected:addcmd("reset", "Resets your character", function()
    CHAR:BreakJoints()
end)

unexpected:addcmd("clearhats", "Removes all hats", function()
    for _, item in ipairs(CHAR:GetChildren()) do
        if item:IsA("Accessory") then
            item:Destroy()
        end
    end
end)

unexpected:addcmd("pos", "Prints your position", function()
    unexpected:notify("position", tostring(HRP.Position))
end)

unexpected:addcmd("platformstand", "Toggles PlatformStand", function()
    HUM.PlatformStand = not HUM.PlatformStand
end)

unexpected:addcmd("resetcam", "Resets the camera to your character", function()
    WS.CurrentCamera.CameraSubject = HUM
end)

unexpected:addcmd("flip", "Flips your character upside down", function()
    if HRP then
        HRP.CFrame = HRP.CFrame * CFrame.Angles(math.pi, 0, 0)
    end
end)

unexpected:addcmd("glide", "Enable glide mode", function()
    HUM.JumpPower = 0
    HUM.AutoRotate = false
    local sv = Instance.new("BodyVelocity")
    sv.Name = "GlideVelocity"
    sv.MaxForce = Vector3.new(0, math.huge, 0)
    sv.Velocity = Vector3.new(0, -10, 0)
    sv.Parent = HRP
end)

unexpected:addcmd("unglide", "Disable glide mode", function()
    local glide = HRP:FindFirstChild("GlideVelocity")
    if glide then glide:Destroy() end
    HUM.JumpPower = 50
    HUM.AutoRotate = true
end)

unexpected:addcmd("iceslide", "Slide around with low friction", function()
    for _, part in ipairs(CHAR:GetDescendants()) do
        if part:IsA("BasePart") then
            part.CustomPhysicalProperties = PhysicalProperties.new(0.1, 0.3, 0.5)
        end
    end
end)

unexpected:addcmd("uniceslide", "Restore normal walking friction", function()
    for _, part in ipairs(CHAR:GetDescendants()) do
        if part:IsA("BasePart") then
            part.CustomPhysicalProperties = PhysicalProperties.new(0.7, 0.3, 0.5)
        end
    end
end)

unexpected:addcmd("walkspeed", "Set your walkspeed", function(speed)
    HUM.WalkSpeed = tonumber(speed) or 16
end, nil, {"speed"})

unexpected:addcmd("jumppower", "Set your jumppower", function(power)
    HUM.JumpPower = tonumber(power) or 50
end, nil, {"power"})

unexpected:addcmd("sit", "Force sit", function()
    HUM.Sit = true
end)

unexpected:addcmd("stand", "Force stand", function()
    HUM.Sit = false
    HUM:ChangeState(Enum.HumanoidStateType.GettingUp)
end, {"unsit"}, nil)

local spinning, spinConnection = false, nil
unexpected:addcmd("spin", "Spin your character", function(speed)
    speed = tonumber(speed) or 5
    if spinning and spinConnection then return end
    spinning = true
    spinConnection = RS.Heartbeat:Connect(function()
        if HRP then
            HRP.CFrame = HRP.CFrame * CFrame.Angles(0, math.rad(speed), 0)
        end
    end)
    task.delay(10, function()
        if spinning and spinConnection then
            spinConnection:Disconnect()
            spinConnection = nil
            spinning = false
        end
    end)
end, nil, {"speed"})

unexpected:addcmd("unspin", "Stop spinning your character", function()
    if spinConnection then
        spinConnection:Disconnect()
        spinConnection = nil
    end
    spinning = false
end)

unexpected:addcmd("stun", "Freezes your character (PlatformStand)", function()
    HUM.PlatformStand = true
end)

unexpected:addcmd("unstun", "Remove fake stun", function()
    HUM.PlatformStand = false
end)

unexpected:addcmd("jump", "Forces local jump", function()
    HUM:ChangeState(Enum.HumanoidStateType.Jumping)
end)

unexpected:addcmd("state", "Set HumanoidState", function(args)
    local input = args[1]
    if not input then return end
    input = input:upper()
    for _, state in ipairs(Enum.HumanoidStateType:GetEnumItems()) do
        if state.Name:upper() == input then
            HUM:ChangeState(state)
            return
        end
    end
end)

unexpected:addcmd("[CLIENT] freeze", "Freeze character", function()
    for _, p in ipairs(CHAR:GetChildren()) do
        if p:IsA("BasePart") then
            p.Anchored = true
        end
    end
end)

unexpected:addcmd("[CLIENT] unfreeze", "Unfreeze your character", function()
    for _, p in ipairs(CHAR:GetChildren()) do
        if p:IsA("BasePart") then
            p.Anchored = false
        end
    end
end)

unexpected:addcmd("print", "Prints all arguments", function(...) 
    print(...) 
end, {"echo", "say"}, {"..."})

unexpected:addcmd("notify", "Notify all arguments", function(...) 
    unexpected:notify("unexpected", ...)
end, nil, {"..."})

unexpected:addcmd("cmds", "Shows commands", function()
	unexpected:notify("unexpected", "Check the menu.")
end)

unexpected:addcmd("rejoin", "Rejoins the current server", function()
    TPS:Teleport(game.PlaceId, LP)
end)

unexpected:addcmd("keepUX", "Keep 'unexpected' running even on rejoin", function(state)
	state = typeof(state) == "string" and state:lower() or ""
	if state == "true" then
		getgenv().keepUX = true
	elseif state == "false" then
		getgenv().keepUX = false
	else
		unexpected:notify("keepUX", "Usage: keepUX true/false")
		return
	end
	UX_config()
	unexpected:notify("keepUX", "Now set to:", tostring(getgenv().keepUX))
end, nil, {"true/false"})

local flying, flyConnA, flyConnB = false, nil, nil
unexpected:addcmd("fly", "Enable flying", function(spd)
	if flying then return unexpected:notify("flying", "Unfly first before changing speed") end
	spd, flying = tonumber(spd) or 3, true

	HUM.PlatformStand = true
	bv, bg = Instance.new("BodyVelocity", HRP), Instance.new("BodyGyro", HRP)
	bv.MaxForce, bg.MaxTorque, bg.P = Vector3.one * 1e6, Vector3.one * 1e6, 1e4

	local input = {w = 0, s = 0, a = 0, d = 0, up = 0, down = 0}

	if MOBILE then
		HUM.StateChanged:Connect(function(_, state)
			if state == Enum.HumanoidStateType.Jumping then
				input.up = 1
				task.delay(0.3, function() input.up = 0 end)
			end
		end)
	else
		local function set(k, v)
			if k == Enum.KeyCode.W then input.w = v elseif k == Enum.KeyCode.S then input.s = -v
			elseif k == Enum.KeyCode.A then input.a = -v elseif k == Enum.KeyCode.D then input.d = v
			elseif k == Enum.KeyCode.Space then input.up = v elseif k == Enum.KeyCode.LeftShift then input.down = -v end
		end
		flyConnA = UIS.InputBegan:Connect(function(i, g) if not g then set(i.KeyCode, 1) end end)
		flyConnB = UIS.InputEnded:Connect(function(i) set(i.KeyCode, 0) end)
	end

	task.spawn(function()
		while flying and HRP and CAM do
			task.wait()
			local move = MOBILE and HUM.MoveDirection + Vector3.new(0, input.up, 0)
				or Vector3.new(input.a + input.d, input.up + input.down, -(input.w + input.s))
			bv.Velocity = move.Magnitude > 0 and CAM.CFrame:VectorToWorldSpace(move.Unit) * spd * 10 or Vector3.zero
			bg.CFrame = CAM.CFrame
			HUM:ChangeState(Enum.HumanoidStateType.FallingDown)
		end
	end)
end, nil, {"speed"})

unexpected:addcmd("unfly", "Disable flying", function()
	flying = false
	HUM.PlatformStand = false
	for _, c in ipairs({flyConnA, flyConnB, bv, bg}) do if c then pcall(function() c:Disconnect() end) pcall(function() c:Destroy() end) end end
	task.wait()
	HUM:ChangeState(Enum.HumanoidStateType.Jumping)
end)

local afConn, lastSafe, count = nil, nil, 0
unexpected:addcmd("antifling", "Stops flings via velocity detection", function()
	if afConn then return end
	afConn = RS.Heartbeat:Connect(function()
		local lv, av = HRP.AssemblyLinearVelocity, HRP.AssemblyAngularVelocity
		if lv.Magnitude > 250 or av.Magnitude > 250 then
			count += 1
			if count >= 2 then
				HRP.AssemblyLinearVelocity = Vector3.zero
				HRP.AssemblyAngularVelocity = Vector3.zero
				if lastSafe then HRP.CFrame = lastSafe end
				count = 0
			end
		else
			count = 0
			if lv.Magnitude < 10 and av.Magnitude < 10 then
				lastSafe = HRP.CFrame
			end
		end
	end)
end)

unexpected:addcmd("unantifling", "Disables fling protection", function()
    if afConn then afConn:Disconnect() afConn = nil end
end)

local banging, conn = false
unexpected:addcmd("bang", "Bang someone", function(name, speedArg)
	if banging then return end
	local target = table.find(PLRS:GetPlayers(), function(p)
		local n = name:lower()
		return p.Name:lower() == n or p.DisplayName:lower() == n
	end)
	if not target or not target.Character or not target.Character:FindFirstChild("HumanoidRootPart") then return end

	local speed, thrp = tonumber(speedArg) or 5, target.Character.HumanoidRootPart
	local t, inwards = 0, true
	banging = true

	conn = RS.Heartbeat:Connect(function(dt)
	
		if not banging then conn:Disconnect() conn = nil return end
		local lv = thrp.CFrame.LookVector.Unit
		local back = thrp.Position - lv * 2
		local front = thrp.Position - lv
		local cf = CFrame.new(inwards and front or back, thrp.Position)

		t = math.min(t + dt * speed, 1)
		HRP.CFrame = HRP.CFrame:Lerp(cf, t)
		if t >= 1 then inwards = not inwards t = 0 end
	end)
end)

unexpected:addcmd("unbang", "Stop banging", function()
	banging = false
	conn = conn and conn:Disconnect()
end)

unexpected:addcmd("antiafk", "Never get kicked", function()
    LP.Idled:Connect(function()
        VU:ClickButton2(Vector2.new())
    end)
end)

unexpected:addcmd("execute", "Execute code", function(...)
    loadstring(...)()
end, nil, {...})

--#locales
UX_rconfig()
showPILL()

if MOBILE then
    SHS(true)
    unexpected_UI["PILL"].Size = UDim2.fromOffset(339, 71)
    unexpected_UI["CLI"].Size = UDim2.fromOffset(230, 54)
    unexpected_UI["MENU"].ImageTransparency = 0
end

local tpCHECK = false
LP.OnTeleport:Connect(function(State)
	if getgenv().keepUX and not tpCHECK and queueteleport then
		tpCHECK = true
		queueteleport("loadstring(game:HttpGet('https://raw.githubusercontent.com/hashed-cmd/unexpected-cmd/refs/heads/main/source'))()")
	end
end)

task.spawn(function()
    local success, result = pcall(function() return HS:JSONDecode(game:HttpGet("https://raw.githubusercontent.com/hashed-cmd/unexpected-cmd/refs/heads/main/version")) end)
    if success and typeof(result) == "table" then
        if result.version ~= currentVersion then
            unexpected:notify("unexpected", "You are using an old version (current: " .. currentVersion .. ", latest: " .. result.version .. ")")
        end
        if result.shout ~= "" then
            unexpected:notify("unexpected", result.shout)
        end
    end
end)
--#localesEnd
